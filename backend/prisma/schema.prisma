// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING
  AWAITING_PASSWORD
  ACTIVE
  SUSPENDED
}

enum QuizType {
  FLASHCARD
  FLASHCARD_REVERSE
  TYPING
}

enum LearningMode {
  CRAM
  NORMAL
  LAZY
}

model User {
  id        String   @id @default(cuid())
  fullName  String
  email     String   @unique
  password  String?
  status    UserStatus @default(PENDING)
  verificationCode String?
  codeExpiresTime DateTime? 
  verificationExpiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  decks Deck[]
  refreshTokens RefreshToken[]
  reviewLogs ReviewLog[]
}

model Deck {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  cards Card[]
  quizType QuizType @default(FLASHCARD)
  learningMode LearningMode @default(NORMAL)
  isRandomOrder Boolean @default(false)
}

model Card {
  id        String   @id @default(cuid())
  front     String
  back      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String

  // Fields for Spaced Repetition
  nextReviewAt DateTime @default(now())
  studyStage Int @default(0)
  reviewLogs ReviewLog[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ReviewLog {
  id        String   @id @default(cuid())
  userId    String
  cardId    String
  rating    Boolean  
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

